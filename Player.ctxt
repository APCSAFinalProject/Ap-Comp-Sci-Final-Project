#BlueJ class context
comment0.target=Player
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Player\ here.\r\n\ \r\n\ @author\ (your\ name)\ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=
comment1.target=Player()
comment1.text=\r\n\ The\ only\ constructor\ for\ player\ is\ a\ non-input\ constructor.\ A\ player\r\n\ is\ always\ created\ at\ the\ start\ of\ the\ game\ with\ the\ same\ stats.\r\n
comment10.params=
comment10.target=int\ getDamage()
comment10.text=\r\n\ Gets\ the\ damage\ the\ player\ deals.\r\n\ @return\ player's\ damage\r\n
comment11.params=
comment11.target=void\ followMouse()
comment11.text=\r\n\ A\ method\ that\ runs\ at\ all\ times,\ excluding\ when\ the\ player\ is\ doing\ a\ dash\r\n\ attack.\ It\ gets\ the\ position\ of\ the\ mouse\ on\ the\ screen,\ and\ points\ the\r\n\ player\ towards\ the\ mouse.\r\n
comment12.params=
comment12.target=void\ takeInput()
comment12.text=\r\n\ Controls\ all\ button\ click\ input.\ This\ includes\ directional\ keys\ for\r\n\ movement\ and\ the\ key\ to\ lunge\ attack.\ \r\n
comment13.params=speed
comment13.target=void\ moveUp(int)
comment13.text=\r\n\ Special\ move\ method\ designed\ to\ always\ move\ the\ player\ in\ a\ set\ direction,\ rather\r\n\ than\ the\ move()\ method,\ which\ moves\ where\ the\ player\ is\ pointing.\ These\ methods\r\n\ achieve\ movement\ by\ taking\ in\ an\ input\ for\ how\ many\ tiles\ should\ be\ moved,\ then\r\n\ executing\ a\ for\ loop\ that\ many\ times,\ each\ time\ it\ tests\ to\ see\ if\ it\ can\ move,\r\n\ then\ sets\ its\ location\ to\ one\ pixel\ in\ the\ direction\ it\ needs\ to\ go.\ This\r\n\ particular\ method\ always\ moves\ in\ the\ negative\ Y\ direction\ (Up).\r\n\ \r\n\ @param\ speed\ The\ amount\ to\ move\r\n
comment14.params=speed
comment14.target=void\ moveDown(int)
comment14.text=\r\n\ Functionally\ the\ same\ as\ moveUp,\ but\ moves\ in\ the\ positive\ Y\ direction\ (Down).\r\n\ @param\ speed\ The\ amount\ to\ move\r\n
comment15.params=speed
comment15.target=void\ moveLeft(int)
comment15.text=\r\n\ Functionally\ the\ same\ as\ moveUp,\ but\ moves\ in\ the\ negative\ X\ direction\ (Left).\r\n\ @param\ speed\ The\ amount\ to\ move\r\n
comment16.params=speed
comment16.target=void\ moveRight(int)
comment16.text=\r\n\ Functionally\ the\ same\ as\ moveUp,\ but\ moves\ in\ the\ positive\ X\ direction\ (Right).\r\n\ @param\ speed\ The\ amount\ to\ move\r\n
comment17.params=
comment17.target=void\ hit()
comment17.text=\r\n\ Method\ called\ for\ attacking\ an\ enemy.\ tests\ to\ see\ if\ it\ is\ able\ to\ deal\ damage\r\n\ and\ if\ it\ is\ currently\ touching\ an\ enemy.\ If\ it\ touching\ an\ enemy,\ it\ deals\ damage\r\n\ to\ one\ enemy\ that\ it\ is\ touching.\ After\ it\ deals\ damage,\ it\ sets\ itself\ to\ no\ longer\r\n\ be\ able\ to\ deal\ damage.\ This\ means\ it\ will\ not\ attack\ multiple\ enemies\ in\ a\ single\r\n\ lunge,\ and\ it\ will\ not\ deal\ damage\ to\ an\ enemy\ twice\ in\ a\ single\ lunge.\ \r\n
comment18.params=
comment18.target=void\ die()
comment18.text=\r\n\ Method\ that\ is\ run\ every\ tick.\ Tests\ to\ see\ if\ it\ is\ at\ zero\ health,\ and\ removes\r\n\ the\ player\ from\ the\ game\ if\ it\ is.\r\n
comment19.params=whatStat\ howMuch
comment19.target=void\ levelUp(int,\ int)
comment19.text=\r\n\ Method\ for\ adding\ stats\ to\ the\ player.\ Heals\ player\ no\ matter\ the\ parameters.\r\n\ @param\ whatStat\ determines\ which\ stat\ to\ upgrade.\ 0\ is\ health,\ 1\ is\ speed,\ 2\ is\r\n\ damage.\r\n\ @param\ howMuch\ how\ many\ points\ to\ upgrade\ the\ selected\ stat\ by.\ \r\n
comment2.params=
comment2.target=void\ act()
comment2.text=\r\n\ The\ Act\ method\ runs\ the\ player.\ Every\ tick,\ whatever\ is\ contained\ within\r\n\ this\ method\ is\ run.\ \r\n
comment20.params=
comment20.target=void\ heal()
comment20.text=\r\n\ A\ full\ heal\ of\ the\ player.\ Sets\ health\ back\ to\ maximum.\r\n
comment21.params=amountHealed
comment21.target=void\ heal(int)
comment21.text=\r\n\ A\ heal\ for\ a\ certain\ amount\ of\ the\ player.\ Adds\ that\ amount\ to\ the\ current\ health,\r\n\ if\ health\ is\ at\ maximum\ it\ only\ goes\ to\ the\ maxHealth\ value.\r\n\ \r\n\ @param\ amountHealed\ The\ amount\ to\ heal\r\n
comment22.params=dmg
comment22.target=void\ takeDamage(int)
comment22.text=\r\n\ Only\ called\ by\ the\ Enemy\ class.\ Subtracts\ an\ amount\ of\ damage\ from\ the\ Player's\ health.\r\n\ \r\n\ @param\ dmg\ The\ amount\ of\ damage\ to\ take\r\n
comment23.params=amount
comment23.target=void\ removeMoney(int)
comment23.text=\r\n\ Takes\ money\ out\ of\ the\ player's\ balance.\ Can\ make\ balance\ negative,\r\n\ but\ the\ classes\ calling\ removeMoney\ will\ prevent\ this\ from\ happening.\r\n\ @param\ amount\ the\ amount\ of\ money\ removed\ from\ player's\ balance\r\n
comment24.params=amount
comment24.target=void\ addMoney(int)
comment24.text=\r\n\ Adds\ money\ to\ the\ player's\ balance.\r\n\ @param\ amount\ the\ amount\ of\ money\ to\ add\ to\ the\ player's\ balance.\r\n
comment25.params=
comment25.target=int\ getBalance()
comment25.text=\r\n\ Used\ to\ access\ the\ player's\ balance.\r\n\ @return\ the\ player's\ balance.\r\n
comment26.params=
comment26.target=void\ advance()
comment26.text=\r\n\ Used\ to\ put\ the\ player\ into\ the\ next\ room.\ First\ checks\r\n\ to\ see\ if\ there\ are\ no\ remaining\ enemies.\ If\ so,\ it\ determines\r\n\ which\ door\ the\ player\ is\ standing\ on\ with\ doorNum().\ If\ the\ player\r\n\ is\ standing\ on\ a\ door,\ it\ brings\ the\ player\ to\ wherever\ that\ door\ leads.\r\n
comment27.params=
comment27.target=int\ doorNum()
comment27.text=\r\n\ Finds\ what\ door\ the\ player\ is\ standing\ in\ based\ on\ it's\r\n\ coordinates.\r\n\ @return\ a\ value\ between\ 0\ and\ 3\ representing\ a\ door,\ or\r\n\ -1\ of\ the\ player\ is\ not\ standing\ on\ a\ door.\r\n
comment3.params=
comment3.target=void\ shop()
comment3.text=\r\n\ Method\ used\ for\ when\ the\ player\ is\ in\ the\ shop.\ inShop\ is\ true\ when\r\n\ the\ player\ is\ in\ the\ shop.\ If\ it\ is\ true,\ this\ method\ detects\ if\ the\r\n\ player\ has\ stepped\ onto\ one\ of\ the\ three\ purchase\ locations\ outlined\r\n\ by\ colors\ and\ text\ in\ the\ background\ image.\ If\ they\ do,\ it\ increments\r\n\ that\ stat\ in\ the\ player\ and\ removes\ 50\ from\ the\ player's\ balance.\r\n
comment4.params=
comment4.target=void\ enterShop()
comment4.text=\r\n\ Called\ to\ declare\ that\ the\ player\ has\ entered\ the\ shop.\r\n
comment5.params=
comment5.target=void\ leaveShop()
comment5.text=\r\n\ Called\ when\ leaving\ shop\ to\ declare\ that\ the\ player\ is\ no\ longer\ in\ the\ shop.\r\n
comment6.params=
comment6.target=boolean\ isInShop()
comment6.text=\r\n\ Checks\ if\ the\ player\ is\ in\ the\ shop\r\n\ \r\n\ @return\ True\ if\ in\ shop.\r\n
comment7.params=
comment7.target=int\ getCurrentHealth()
comment7.text=\r\n\ Gets\ the\ player's\ health\r\n\ \r\n\ @return\ health\r\n
comment8.params=
comment8.target=int\ getMaxHealth()
comment9.params=
comment9.target=int\ getSpeed()
comment9.text=\r\n\ Gets\ the\ players\ speed.\r\n\ \r\n\ @return\ player's\ speed\r\n
numComments=28
