#BlueJ class context
comment0.target=MyWorld
comment0.text=\n\ Write\ a\ description\ of\ class\ MyWorld\ here.\n\ \n\ @author\ (your\ name)\ \n\ @version\ (a\ version\ number\ or\ a\ date)\n
comment1.params=
comment1.target=MyWorld()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ MyWorld.\n\ \n
comment10.params=
comment10.target=java.util.ArrayList\ getRooms()
comment11.params=
comment11.target=void\ spawnEnemies()
comment12.params=
comment12.target=void\ enterBossRoom()
comment13.params=
comment13.target=void\ addBossDoor()
comment14.params=
comment14.target=void\ clearLevel()
comment15.params=
comment15.target=boolean\ getCleared()
comment16.params=
comment16.target=java.lang.String\ getBossRoom()
comment2.params=
comment2.target=void\ generateCells()
comment2.text=\n\ Creates\ a\ map\ for\ the\ game.\ The\ initial\ random\ number\ creates\ an\ aproximate\ number\ of\ rooms\n\ (though\ due\ to\ the\ nature\ of\ the\ creation,\ this\ number\ cannot\ be\ exact).\ The\ algorithm\ starts\n\ with\ one\ room,\ which\ will\ always\ be\ at\ coordinate\ 0,0.\ It\ then\ goes\ through\ and\ adds\ an\n\ adjacent\ room\ to\ the\ ArrayList\ of\ rooms.\ Then,\ it\ does\ the\ entire\ process\ again,\ adding\ an\ adjacent\n\ room\ to\ every\ room\ in\ the\ list\ until\ the\ list\ is\ longer\ than\ numRooms\ elements.\ After\ each\ iteration,\n\ a\ double\ for\ loop\ removes\ any\ duplicate\ rooms\ from\ the\ ArrayList,\ meaning\ none\ will\ overlap.\ \n\ The\ result\ is\ that\ mapcode\ is\ filled\ with\ a\ network\ of\ room\ coordinates\ that\ all\ connect.\n
comment3.params=
comment3.target=void\ addDoors()
comment3.text=\n\ The\ next\ step\ in\ the\ process\ of\ generating\ the\ map.\ This\ takes\ all\ of\ the\ rooms,\ gets\ the\ coordinates\n\ in\ each,\ and\ figures\ out\ if\ a\ room\ has\ any\ adjacent\ to\ it.\ When\ it\ does\ find\ a\ room\ adjacent,\ it\ determines\n\ what\ side\ it\ is\ adjacent\ on,\ and\ adds\ a\ code\ onto\ the\ string\ for\ a\ door.\ A\ door\ code\ might\ look\ like\:\n\ "N5"\ meaning\ that\ there\ is\ a\ door\ on\ the\ north\ side\ of\ the\ room\ that\ connects\ to\ the\ room\ at\ index\ 5.\ \n\ A\ completed\ code\ could\ look\ like\ "1,2,E5,S2,W3"\ the\ first\ two\ numbers,\ 1\ and\ 2,\ are\ the\ coordinates\ of\ the\n\ room\ itself.\ After\ that,\ each\ combination\ of\ letter\ and\ number\ is\ where\ a\ door\ is\ and\ what\ room\ it\ leads\ to.\n\ The\ resultant\ strings\ will\ be\ used\ in\ two\ ways.\ First,\ to\ determine\ what\ image\ to\ use\ for\ the\ background\n\ in\ this\ room.\ Second,\ to\ determine\ what\ room\ to\ load\ when\ the\ player\ enters\ a\ doorway.\n
comment4.params=roomcode
comment4.target=boolean[]\ findDoors(java.lang.String)
comment4.text=\n\ This\ method\ is\ mostly\ a\ setup\ for\ findConfig.\ It\ translates\ a\ code\ such\ as\:\ "1,1,N3,W5,S1"\ into\ a\ boolean\n\ array\ that\ tells\ only\ of\ there\ is\ a\ door\ somewhere.\ With\ the\ example\ given,\ the\ boolean\ array\ would\ be\n\ [true,\ false,\ true,\ true].\ Index\ 0\ is\ North,\ index\ 1\ is\ east,\ and\ so\ on.\ If\ there\ is\ a\ door\ in\ the\ north,\n\ index\ 0\ is\ set\ to\ true.\ This\ is\ used\ in\ findConfig\ to\ determine\ what\ image\ to\ use\ for\ the\ background\ in\n\ this\ room.\ \n
comment5.params=doors
comment5.target=java.lang.String\ findConfig(boolean[])
comment5.text=\n\ Creates\ a\ string\ with\ the\ information\ on\ what\ kind\ of\ room\ is\ to\ be\ displayed\ and\ what\ rotation\ it\ should\n\ be\ put\ into.\ The\ method\ first\ determines\ how\ many\ rooms\ there\ are,\ then\ tests\ every\ possible\ layout\ for\n\ that\ room\ against\ what\ the\ room\ actually\ is,\ and\ then\ adds\ 90\ multiplied\ by\ how\ many\ 90\ degree\ rotations\n\ were\ made\ to\ find\ the\ correct\ layout.\ \n\ @returns\ a\ string\ with\ two\ pieces\ of\ information\ separated\ by\ a\ comma.\ The\ first\ piece\ of\ information\ is\n\ what\ type\ of\ room\ to\ use.\ "1"\ means\ a\ room\ with\ 1\ door.\ "2"\ means\ a\ room\ with\ two\ adjacent\ doors.\ "2S"\n\ means\ a\ room\ with\ two\ doors\ opposite\ from\ eachother,\ and\ so\ on.\ The\ second\ piece\ tells\ how\ much\ the\ room\n\ is\ rotated\ compared\ to\ the\ basic\ model.\ 0\ means\ keep\ the\ standard\ image,\ 90\ means\ rotate\ 90\ degrees,\ etc.\ \n
comment6.params=roomCode
comment6.target=void\ updateImage(java.lang.String)
comment7.params=whichDoor
comment7.target=void\ nextRoom(int)
comment8.params=
comment8.target=int\ getRoom()
comment9.params=
comment9.target=java.lang.String\ getRoomCode()
numComments=17
