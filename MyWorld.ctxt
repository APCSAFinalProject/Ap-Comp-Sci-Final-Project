#BlueJ class context
comment0.target=MyWorld
comment0.text=\r\n\ Write\ a\ description\ of\ class\ MyWorld\ here.\r\n\ \r\n\ @author\ (your\ name)\ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=
comment1.target=MyWorld()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ MyWorld.\ Generates\ the\ map,\ starts\ the\ music,\ and\ adds\ initial\ enemies.\r\n\ \r\n
comment10.params=
comment10.target=java.lang.String\ getRoomCode()
comment10.text=\r\n\ Helpful\ for\ seeing\ the\ coordinate\ of\ the\ current\ room.\r\n\ @returns\ the\ roomCode\ of\ the\ current\ room,\ containing\ coordinates\ and\ all\ doors.\r\n
comment11.params=
comment11.target=java.util.ArrayList\ getRooms()
comment11.text=\r\n\ Helpful\ for\ seeing\ the\ entire\ map,\ shows\ the\ coordinates\ and\ doors\ for\ every\ room.\r\n\ @returns\ all\ items\ in\ the\ mapcode\ ArrayList.\r\n
comment12.params=
comment12.target=void\ spawnEnemies()
comment12.text=\r\n\ Spawns\ a\ random\ number\ of\ enemies\ between\ 1\ and\ 4,\ does\ not\ let\ them\ spawn\ near\ the\ player.\r\n\ Does\ this\ by\ generating\ a\ random\ X\ and\ Y\ value,\ checking\ if\ they\ are\ near\ the\ player,\ and\ if\ so\r\n\ regenerating\ them.\r\n
comment13.params=
comment13.target=void\ enterBossRoom()
comment13.text=\r\n\ Called\ by\ the\ boss\ door\ when\ the\ player\ steps\ on\ it.\ First\ tests\ to\ see\ if\ there\ are\ any\ enemies,\r\n\ and\ if\ so\ does\ not\ let\ the\ player\ go\ through\ the\ door.\ If\ there\ are\ no\ enemies,\ it\ moves\ the\ player\r\n\ to\ the\ boss\ room,\ removes\ the\ door,\ and\ spawns\ one\ of\ three\ bosses\ randomly.\ \r\n
comment14.params=
comment14.target=void\ addBossDoor()
comment14.text=\r\n\ addBossDoor\ selects\ a\ random\ room\ in\ the\ map,\ then\ adds\ "B"\ to\ it's\ string\ representation\r\n\ meaning\ that\ this\ room\ contains\ the\ boss\ door.\ When\ selecting\ a\ random\ number,\ it\ adds\ 1\r\n\ automatically\ so\ that\ it\ is\ never\ 0.\ If\ the\ number\ is\ 0,\ that\ means\ the\ boss\ door\ is\ in\ the\ same\r\n\ room\ as\ the\ starting\ location,\ which\ is\ not\ desired.\ To\ make\ sure\ the\ random\ number\ now\ never\ goes\r\n\ out\ of\ bounds,\ 1\ is\ subtracted\ from\ mapcode.size(),\ making\ the\ range\ from\ the\ second\ item\ in\r\n\ mapcode\ to\ the\ last\ item\ in\ mapcode.\r\n
comment15.params=
comment15.target=void\ clearLevel()
comment15.text=\r\n\ Sets\ the\ value\ at\ currentRoom\ in\ cleared\ to\ true.\ This\ is\ called\ when\ the\ player\ kills\ all\ enemies\r\n\ in\ a\ room.\ This\ makes\ it\ so\ when\ you\ return\ to\ a\ room\ after\ clearing\ it,\ enemies\ do\ not\ spawn\ again.\r\n
comment16.params=
comment16.target=boolean\ getCleared()
comment16.text=\r\n\ Tests\ to\ see\ if\ the\ current\ room\ has\ been\ cleared\ already,\ if\ true\ enemies\ will\ not\ spawn\ again.\r\n\ @returns\ whether\ the\ current\ room\ is\ cleared.\r\n
comment17.params=
comment17.target=java.lang.String\ getBossRoom()
comment17.text=\r\n\ Not\ used\ by\ the\ program\ but\ can\ be\ called\ outside\ to\ see\ where\ the\ bossroom\ is,\ useful\ for\r\n\ troubleshooting.\r\n\ @returns\ the\ room\ code\ for\ whatever\ room\ contains\ the\ boss\ door.\r\n
comment18.params=
comment18.target=void\ enterShop()
comment18.text=\r\n\ Called\ after\ a\ boss\ is\ defeated.\ Takes\ the\ player\ to\ a\ shop\ where\ they\ can\ purchase\ stats.\r\n
comment19.params=
comment19.target=void\ displayStats()
comment19.text=\r\n\ Displays\ what\ the\ player's\ current\ stats\ are\ when\ in\ the\ shop.\r\n
comment2.params=
comment2.target=void\ act()
comment2.text=\r\n\ While\ an\ act\ method\ is\ not\ typical\ in\ a\ world\ class,\ it\ is\ useful\ for\ this\ game\ because\ it\ allows\ us\ to\r\n\ constantly\ update\ the\ stats\ we\ are\ displaying.\ Displays\ the\ current\ level,\ how\ much\ money\ the\ player\ has\r\n\ and\ how\ much\ health\ the\ player\ has.\r\n
comment20.params=
comment20.target=void\ nextLevel()
comment20.text=\r\n\ Called\ after\ exiting\ the\ shop.\ Brings\ the\ player\ to\ the\ next\ level,\ where\ difficulty\ is\ increased.\r\n\ Generates\ a\ new\ random\ map.\r\n
comment21.params=
comment21.target=void\ deathSequence()
comment21.text=\r\n\ Called\ when\ the\ player\ dies.\ Prints\ scores/level\ on\ the\ screen\ along\ with\r\n\ a\ death\ message\ background.\ Removes\ all\ entities\ from\ the\ game,\ stops\ the\r\n\ background\ music,\ plays\ a\ death\ tune,\ and\ removes\ the\ HUD\ text.\ \r\n
comment3.params=
comment3.target=void\ generateCells()
comment3.text=\r\n\ Creates\ a\ map\ for\ the\ game.\ The\ initial\ random\ number\ creates\ an\ aproximate\ number\ of\ rooms\r\n\ (though\ due\ to\ the\ nature\ of\ the\ creation,\ this\ number\ cannot\ be\ exact).\ The\ algorithm\ starts\r\n\ with\ one\ room,\ which\ will\ always\ be\ at\ coordinate\ 0,0.\ It\ then\ goes\ through\ and\ adds\ an\r\n\ adjacent\ room\ to\ the\ ArrayList\ of\ rooms.\ Then,\ it\ does\ the\ entire\ process\ again,\ adding\ an\ adjacent\r\n\ room\ to\ every\ room\ in\ the\ list\ until\ the\ list\ is\ longer\ than\ numRooms\ elements.\ After\ each\ iteration,\r\n\ a\ double\ for\ loop\ removes\ any\ duplicate\ rooms\ from\ the\ ArrayList,\ meaning\ none\ will\ overlap.\ \r\n\ The\ result\ is\ that\ mapcode\ is\ filled\ with\ a\ network\ of\ room\ coordinates\ that\ all\ connect.\r\n
comment4.params=
comment4.target=void\ addDoors()
comment4.text=\r\n\ The\ next\ step\ after\ generateCells\ in\ the\ process\ of\ generating\ the\ map.\ This\ takes\ all\ of\ the\ rooms,\ gets\ the\ coordinates\r\n\ in\ each,\ and\ figures\ out\ if\ a\ room\ has\ any\ adjacent\ to\ it.\ When\ it\ does\ find\ a\ room\ adjacent,\ it\ determines\r\n\ what\ side\ it\ is\ adjacent\ on,\ and\ adds\ a\ code\ onto\ the\ string\ for\ a\ door.\ A\ door\ code\ might\ look\ like\:\r\n\ "N5"\ meaning\ that\ there\ is\ a\ door\ on\ the\ north\ side\ of\ the\ room\ that\ connects\ to\ the\ room\ at\ index\ 5.\ \r\n\ A\ completed\ code\ could\ look\ like\ "1,2,E5,S2,W3"\ the\ first\ two\ numbers,\ 1\ and\ 2,\ are\ the\ coordinates\ of\ the\r\n\ room\ itself.\ After\ that,\ each\ combination\ of\ letter\ and\ number\ is\ where\ a\ door\ is\ and\ what\ room\ it\ leads\ to.\r\n\ The\ resultant\ strings\ will\ be\ used\ in\ two\ ways.\ First,\ to\ determine\ what\ image\ to\ use\ for\ the\ background\r\n\ in\ this\ room.\ Second,\ to\ determine\ what\ room\ to\ load\ when\ the\ player\ enters\ a\ doorway.\r\n
comment5.params=roomcode
comment5.target=boolean[]\ findDoors(java.lang.String)
comment5.text=\r\n\ This\ method\ is\ mostly\ a\ setup\ for\ findConfig.\ It\ translates\ a\ code\ such\ as\:\ "1,1,N3,W5,S1"\ into\ a\ boolean\r\n\ array\ that\ tells\ only\ of\ there\ is\ a\ door\ somewhere.\ With\ the\ example\ given,\ the\ boolean\ array\ would\ be\r\n\ [true,\ false,\ true,\ true].\ Index\ 0\ is\ North,\ index\ 1\ is\ east,\ and\ so\ on.\ If\ there\ is\ a\ door\ in\ the\ north,\r\n\ index\ 0\ is\ set\ to\ true.\ This\ is\ used\ in\ findConfig\ to\ determine\ what\ image\ to\ use\ for\ the\ background\ in\r\n\ this\ room.\ \r\n
comment6.params=doors
comment6.target=java.lang.String\ findConfig(boolean[])
comment6.text=\r\n\ Creates\ a\ string\ with\ the\ information\ on\ what\ kind\ of\ room\ is\ to\ be\ displayed\ and\ what\ rotation\ it\ should\r\n\ be\ put\ into.\ The\ method\ first\ determines\ how\ many\ rooms\ there\ are,\ then\ tests\ every\ possible\ layout\ for\r\n\ that\ room\ against\ what\ the\ room\ actually\ is,\ and\ then\ adds\ 90\ multiplied\ by\ how\ many\ 90\ degree\ rotations\r\n\ were\ made\ to\ find\ the\ correct\ layout.\ This\ is\ used\ in\ the\ method\ updateImage.\ In\ the\ updateImage,\ the\r\n\ configuration\ is\ called\ a\ "simpleRoomCode"\ because\ the\ information\ about\ a\ room\ is\ simplified\ into\ just\r\n\ number\ of\ doors\ and\ a\ rotation.\r\n\ @returns\ a\ string\ with\ two\ pieces\ of\ information\ separated\ by\ a\ comma.\ The\ first\ piece\ of\ information\ is\r\n\ what\ type\ of\ room\ to\ use.\ "1"\ means\ a\ room\ with\ 1\ door.\ "2"\ means\ a\ room\ with\ two\ adjacent\ doors.\ "2S"\r\n\ means\ a\ room\ with\ two\ doors\ opposite\ from\ eachother,\ and\ so\ on.\ The\ second\ piece\ tells\ how\ much\ the\ room\r\n\ is\ rotated\ compared\ to\ the\ basic\ model.\ 0\ means\ keep\ the\ standard\ image,\ 90\ means\ rotate\ 90\ degrees,\ etc.\ \r\n
comment7.params=simpleRoomCode
comment7.target=void\ updateImage(java.lang.String)
comment7.text=\r\n\ Updates\ the\ background\ based\ on\ what\ simpleRoomCode\ is\ entered\ in.\ A\ simpleRoomCode\ consists\ of\ two\ values\ separated\r\n\ by\ a\ comma.\ The\ first\ value\ is\ how\ many\ doors\ there\ are.\ 1\ Means\ 1\ door,\ 2\ means\ 2\ doors,\ etc.\ It\ can\r\n\ also\ be\ 2S\ (as\ in\ 2\ Special)\ which\ means\ two\ doors\ that\ are\ across\ from\ eachother.\ The\ second\ value\ is\r\n\ how\ much\ you\ need\ to\ rotate\ the\ basic\ image\ for\ that\ many\ doors\ in\ order\ for\ it\ to\ match\ the\ layout\ of\ the\r\n\ doors.\ For\ example,\ the\ image\ for\ two\ doors\ has\ a\ door\ to\ the\ north\ and\ to\ the\ west.\ If\ the\ room\ you\ are\r\n\ entering\ contains\ two\ doors\ to\ the\ north\ and\ to\ the\ east,\ the\ background\ image\ must\ be\ rotated\ 90\ degrees\r\n\ so\ that\ instead\ of\ north\ and\ west,\ it's\ doors\ are\ to\ the\ north\ and\ to\ the\ east.\ In\ this\ scenario,\ the\ second\r\n\ value\ would\ be\ 90.\ \r\n\ @param\ simpleRoomCode\ A\ code\ consisting\ of\ a\ type\ and\ rotation\ value\ representing\ a\ room.\ It\ is\ called\ simpleRoomCode\r\n\ because\ a\ normal\ room\ code\ stores\ coordinates\ and\ every\ single\ door\ value,\ and\ whether\ the\ room\ contains\ a\ boss\ door.\r\n\ A\ simpleRoomCode\ removes\ coordinates\ and\ all\ door\ values,\ and\ just\ holds\ information\ about\ what\ the\ room\ looks\ like.\r\n\ A\ simpleRoomCode\ is\ only\ useful\ for\ this\ method.\r\n
comment8.params=whichDoor
comment8.target=void\ nextRoom(int)
comment8.text=\r\n\ Used\ for\ advancing\ the\ player\ into\ the\ next\ room.\ Takes\ in\ whichever\ door\ the\ player\ has\ stepped\ through\r\n\ and\ based\ on\ that\ determines\ which\ room\ they\ are\ going\ to.\ If\ whichDoor\ is\ 0,\ that\ means\ the\ player\ moves\r\n\ north,\ so\ a\ new\ substring\ is\ created\ starting\ with\ the\ character\ "N,"\ which\ means\ the\ north\ door.\ It\ then\r\n\ finds\ the\ number\ that\ follows\ the\ character\ N.\ This\ number\ is\ the\ index\ in\ mapcode\ that\ contains\ the\r\n\ room\ code\ for\ whatever\ room\ is\ to\ the\ north.\ It\ then\ sets\ the\ current\ room\ to\ that\ index,\ and\ updates\r\n\ the\ background\ based\ on\ whatever\ the\ new\ room\ is.\ This\ class\ is\ also\ responsible\ for\ spawning\ enemies.\r\n\ It\ checks\ whether\ the\ room\ that\ the\ player\ just\ entered\ is\ cleared\ or\ not,\ and\ if\ it\ isn't,\ it\ spawns\ in\r\n\ new\ enemies.\r\n\ @param\ whichDoor\ is\ an\ integer\ representing\ which\ door\ the\ player\ stepped\ through.\ 0\ \=\ north,\ 1\ \=\ east,\r\n\ 2\ \=\ south,\ 3\ \=\ west.\r\n
comment9.params=
comment9.target=int\ getRoom()
comment9.text=\r\n\ @returns\ the\ index\ in\ mapcode\ that\ the\ current\ room\ resides\ at.\r\n
numComments=22
